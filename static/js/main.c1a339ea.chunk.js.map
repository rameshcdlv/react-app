{"version":3,"sources":["components/Card-component.jsx","components/CardList-component.jsx","components/Search-box-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","user","id","name","email","CardList","usersInfo","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","changeUser","bind","this","fetch","then","response","json","users","searchUserResult","filter","userResult","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAGaA,G,MAAK,SAAAC,GAAK,OAEnB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BACnB,4BAAKL,EAAMI,KAAKE,MAChB,4BAAKN,EAAMI,KAAKG,UCJXC,G,MAAS,SAAAR,GAAK,OAEtB,yBAAKC,UAAU,aACVD,EAAMS,UAAUC,KAAI,SAAAN,GAAI,OACpB,kBAAC,EAAD,CAAMA,KAAMA,UCLbO,G,YAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAEhB,2BAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC+CjEG,E,YA7Cb,aAAe,IAAD,8BACZ,+CAcFH,aAAa,SAACI,GAEZ,EAAKC,SAAS,EAAKA,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,UAfpD,EAAKC,MAAQ,CACXb,UAAW,GACXU,YAAa,IAGf,EAAKI,WAAa,EAAKA,WAAWC,KAAhB,gBAPN,E,0EAYZC,KAAKP,SAAS,CAAEd,KAAM,a,0CASH,IAAD,OAElBsB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAET,UAAWqB,S,+BAGpC,IAAD,EAE4BL,KAAKH,MAAhCb,EAFD,EAECA,UAAWU,EAFZ,EAEYA,YACbY,EAAmBtB,EAAUuB,QAAO,SAAAC,GAAU,OAAIA,EAAW3B,KAAK4B,cAAcC,SAAShB,EAAYe,kBAE3G,OACE,yBAAKjC,UAAU,OACb,4BAAQA,UAAU,cAC1B,0CACU,kBAAC,EAAD,CAAQW,YAAY,eAAeC,aAAcY,KAAKZ,eACtD,kBAAC,EAAD,CAAUJ,UAAWsB,U,GAxCbK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.c1a339ea.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card-styles.css'\r\n\r\nexport const Card=props=>(\r\n\r\n    <div className=\"card-container\">\r\n        <img alt=\"user\" src={`https://robohash.org/${props.user.id}?set=set2&size=180x180`}></img>\r\n        <h1>{props.user.name}</h1>\r\n        <h2>{props.user.email}</h2>\r\n    </div>\r\n)","import React from 'react'\r\nimport {card, Card} from './Card-component'\r\nimport './card-list-styles.css';\r\n\r\nexport const CardList=props=>(\r\n  \r\n     <div className=\"card-list\">\r\n         {props.usersInfo.map(user =>\r\n              <Card user={user}></Card>\r\n              \r\n              )}\r\n    </div>\r\n)","import React from 'react'\r\nimport './search-box-styles.css'\r\n\r\nexport const Search=({placeholder,handleChange})=>(\r\n\r\n    <input className=\"search\" type=\"Search\" placeholder={placeholder} onChange={handleChange}></input>\r\n          \r\n);","import React, { Component } from 'react';\nimport { CardList } from './components/CardList-component'\nimport './App.css';\nimport { Search } from './components/Search-box-component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      usersInfo: [],\n      searchField: ''\n\n    }\n    this.changeUser = this.changeUser.bind(this)\n  }\n\n  changeUser() {\n\n    this.setState({ user: 'Ramesh' })\n  }\n\n  handleChange=(e)=>{\n\n    this.setState(this.setState({ searchField: e.target.value }))\n\n  }\n\n  componentDidMount() {\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ usersInfo: users }))\n  }\n\n  render() {\n\n    const { usersInfo, searchField } = this.state;\n    const searchUserResult = usersInfo.filter(userResult => userResult.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n<h1>User Cards</h1>\n          <Search placeholder=\"Search Users\" handleChange={this.handleChange}></Search>\n          <CardList usersInfo={searchUserResult}>\n          </CardList>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}